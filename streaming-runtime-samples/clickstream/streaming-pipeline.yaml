apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: kafka-stream-user
spec:
  protocol: "kafka"
  storage:
    clusterStream: "cluster-stream-kafka-user"
  streamMode: [ "read" ]
  keys: [ "user_id" ]
  dataSchemaContext:
    inline:
      type: 'avro'
      schema: |
        namespace: com.tanzu.streaming.runtime.clickstream.etl
        type: record
        name: Users
        fields:
        - name: user_id
          type: string
        - name: name
          type: string
        - name: level
          type: string
    timeAttributes:
      - name: proctime
    options:
      ddl.scan.startup.mode: earliest-offset
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: kafka-stream-click
spec:
  protocol: kafka
  storage:
    clusterStream: "cluster-stream-kafka-click"
  streamMode: [ "read" ]
  keys: [ "user_id" ]
  dataSchemaContext:
    schema:
      namespace: com.tanzu.streaming.runtime.clickstream.etl
      name: Clicks
      fields:
        - name: user_id
          type: string
        - name: page
          type: int
        - name: action
          type: string
        - name: device
          type: string
        - name: agent
          type: string
        - name: event_time
          type: long_timestamp-millis
          metadata:
            from: timestamp
            readonly: true
          watermark: "`event_time` - INTERVAL '30' SECONDS"
    options:
      ddl.scan.startup.mode: earliest-offset
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: kafka-stream-vip-action
spec:
  protocol: "kafka"
  storage:
    clusterStream: "cluster-stream-kafka-vip-action"
  streamMode: [ "read", "write" ]
  keys: [ "user_id" ]
  dataSchemaContext:
    schema:
      namespace: com.tanzu.streaming.runtime.clickstream.etl
      name: VipActions
      fields:
        - name: user_id
          type: string
        - name: name
          type: string
        - name: page
          type: int
        - name: action
          type: string
        - name: event_time
          type: long_timestamp-millis
          watermark: "`event_time` - INTERVAL '1' SECOND"
    options:
      ddl.key.fields: user_id
      ddl.value.format: "json"
      ddl.properties.allow.auto.create.topics: "true"
      ddl.scan.startup.mode: earliest-offset
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: rabbitmq-stream-vip-action
spec:
  keys: [ "user_id" ]
  streamMode: [ "write" ]
  protocol: "rabbitmq"
  storage:
    clusterStream: "cluster-stream-rabbitmq-vip-action"
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Processor
metadata:
  name: vi-actions-processor
spec:
  inputs:
    query:
      - INSERT INTO [[STREAM:kafka-stream-vip-action]] 
        SELECT Users.user_id, Users.name, Clicks.page, Clicks.action, Clicks.event_time 
        FROM [[STREAM:kafka-stream-click]]  
        INNER JOIN [[STREAM:kafka-stream-user]] ON Clicks.user_id = Users.user_id  
        WHERE Users.level = 'PLATINUM'
    debug:
      query: "SELECT * FROM VipActions"
      explain: [ 3 ]
    sources:
      - name: "kafka-stream-vip-action"
  outputs:
    - name: "rabbitmq-stream-vip-action"
  template:
    spec:
      containers:
        - name: uppercase-grpc
          image: ghcr.io/vmware-tanzu/streaming-runtimes/udf-uppercase-go:0.1

